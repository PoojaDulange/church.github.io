{"version":3,"file":"static/js/3789.74177ebb.chunk.js","mappings":"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","sources":["layout/DefaultLayout.js","views/dashboard/Dashboard.js","views/forms/checks-radios/ChecksRadios.js","views/pages/login/Login.js","views/widgets/WidgetsBrand.js","views/widgets/WidgetsDropdown.js","../node_modules/@coreui/icons/js/free/cil-lock-locked.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useContext } from 'react'\nimport { contextType } from 'simplebar-react'\nimport { UserContext } from 'src/context/UserContext'\nimport { AppContent, AppSidebar, AppFooter, AppHeader } from '../components/index'\nimport { UserContextProvider } from 'src/context/UserContext'\n\nconst DefaultLayout = () => {\n  // const { user } = useContext(UserContext)\n  // console.log(user)\n  return (\n    // <UserContextProvider>\n    <div>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n          <AppContent />\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n    // </UserContextProvider>\n  )\n}\n\nexport default DefaultLayout\n","import React from 'react'\nimport image from '../../assets/images/website.png'\n\nimport {\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cibCcAmex,\n  cibCcApplePay,\n  cibCcMastercard,\n  cibCcPaypal,\n  cibCcStripe,\n  cibCcVisa,\n  cibGoogle,\n  cibFacebook,\n  cibLinkedin,\n  cifBr,\n  cifEs,\n  cifFr,\n  cifIn,\n  cifPl,\n  cifUs,\n  cibTwitter,\n  cilCloudDownload,\n  cilPeople,\n  cilUser,\n  cilUserFemale,\n} from '@coreui/icons'\n\nimport avatar1 from 'src/assets/images/avatars/1.jpg'\nimport avatar2 from 'src/assets/images/avatars/2.jpg'\nimport avatar3 from 'src/assets/images/avatars/3.jpg'\nimport avatar4 from 'src/assets/images/avatars/4.jpg'\nimport avatar5 from 'src/assets/images/avatars/5.jpg'\nimport avatar6 from 'src/assets/images/avatars/6.jpg'\n\nimport WidgetsBrand from '../widgets/WidgetsBrand'\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\nimport { useLocation } from 'react-router-dom'\n\n// eslint-disable-next-line react/prop-types\nconst Dashboard = () => {\n  // console.log(user1)\n\n  const random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n  const progressExample = [\n    { title: 'Visits', value: '29.703 Users', percent: 40, color: 'success' },\n    { title: 'Unique', value: '24.093 Users', percent: 20, color: 'info' },\n    { title: 'Pageviews', value: '78.706 Views', percent: 60, color: 'warning' },\n    { title: 'New Users', value: '22.123 Users', percent: 80, color: 'danger' },\n    { title: 'Bounce Rate', value: 'Average Rate', percent: 40.15, color: 'primary' },\n  ]\n\n  const progressGroupExample1 = [\n    { title: 'Monday', value1: 34, value2: 78 },\n    { title: 'Tuesday', value1: 56, value2: 94 },\n    { title: 'Wednesday', value1: 12, value2: 67 },\n    { title: 'Thursday', value1: 43, value2: 91 },\n    { title: 'Friday', value1: 22, value2: 73 },\n    { title: 'Saturday', value1: 53, value2: 82 },\n    { title: 'Sunday', value1: 9, value2: 69 },\n  ]\n\n  const progressGroupExample2 = [\n    { title: 'Male', icon: cilUser, value: 53 },\n    { title: 'Female', icon: cilUserFemale, value: 43 },\n  ]\n\n  const progressGroupExample3 = [\n    { title: 'Organic Search', icon: cibGoogle, percent: 56, value: '191,235' },\n    { title: 'Facebook', icon: cibFacebook, percent: 15, value: '51,223' },\n    { title: 'Twitter', icon: cibTwitter, percent: 11, value: '37,564' },\n    { title: 'LinkedIn', icon: cibLinkedin, percent: 8, value: '27,319' },\n  ]\n\n  const tableExample = [\n    {\n      avatar: { src: avatar1, status: 'success' },\n      user: {\n        name: 'Yiorgos Avraamu',\n        new: true,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'USA', flag: cifUs },\n      usage: {\n        value: 50,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'success',\n      },\n      payment: { name: 'Mastercard', icon: cibCcMastercard },\n      activity: '10 sec ago',\n    },\n    {\n      avatar: { src: avatar2, status: 'danger' },\n      user: {\n        name: 'Avram Tarasios',\n        new: false,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'Brazil', flag: cifBr },\n      usage: {\n        value: 22,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'info',\n      },\n      payment: { name: 'Visa', icon: cibCcVisa },\n      activity: '5 minutes ago',\n    },\n    {\n      avatar: { src: avatar3, status: 'warning' },\n      user: { name: 'Quintin Ed', new: true, registered: 'Jan 1, 2021' },\n      country: { name: 'India', flag: cifIn },\n      usage: {\n        value: 74,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'warning',\n      },\n      payment: { name: 'Stripe', icon: cibCcStripe },\n      activity: '1 hour ago',\n    },\n    {\n      avatar: { src: avatar4, status: 'secondary' },\n      user: { name: 'Enéas Kwadwo', new: true, registered: 'Jan 1, 2021' },\n      country: { name: 'France', flag: cifFr },\n      usage: {\n        value: 98,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'danger',\n      },\n      payment: { name: 'PayPal', icon: cibCcPaypal },\n      activity: 'Last month',\n    },\n    {\n      avatar: { src: avatar5, status: 'success' },\n      user: {\n        name: 'Agapetus Tadeáš',\n        new: true,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'Spain', flag: cifEs },\n      usage: {\n        value: 22,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'primary',\n      },\n      payment: { name: 'Google Wallet', icon: cibCcApplePay },\n      activity: 'Last week',\n    },\n    {\n      avatar: { src: avatar6, status: 'danger' },\n      user: {\n        name: 'Friderik Dávid',\n        new: true,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'Poland', flag: cifPl },\n      usage: {\n        value: 43,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'success',\n      },\n      payment: { name: 'Amex', icon: cibCcAmex },\n      activity: 'Last week',\n    },\n  ]\n\n  return (\n    <div className=\"text-center\">\n      <img src={image} alt=\"Construction\" style={{ width: '100%', height: 'auto' }}></img>\n      {/* <WidgetsDropdown />\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Traffic\n              </h4>\n              <div className=\"small text-medium-emphasis\">January - July 2021</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n              <CButtonGroup className=\"float-end me-3\">\n                {['Day', 'Month', 'Year'].map((value) => (\n                  <CButton\n                    color=\"outline-secondary\"\n                    key={value}\n                    className=\"mx-0\"\n                    active={value === 'Month'}\n                  >\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              datasets: [\n                {\n                  label: 'My First dataset',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                  fill: true,\n                },\n                {\n                  label: 'My Second dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-success'),\n                  pointHoverBackgroundColor: getStyle('--cui-success'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                },\n                {\n                  label: 'My Third dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-danger'),\n                  pointHoverBackgroundColor: getStyle('--cui-danger'),\n                  borderWidth: 1,\n                  borderDash: [8, 5],\n                  data: [65, 65, 65, 65, 65, 65, 65],\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 5 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <div className=\"text-medium-emphasis\">{item.title}</div>\n                <strong>\n                  {item.value} ({item.percent}%)\n                </strong>\n                <CProgress thin className=\"mt-2\" color={item.color} value={item.percent} />\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n      </CCard>\n\n      <WidgetsBrand withCharts />\n\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Traffic {' & '} Sales</CCardHeader>\n            <CCardBody>\n              <CRow>\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-info py-1 px-3\">\n                        <div className=\"text-medium-emphasis small\">New Clients</div>\n                        <div className=\"fs-5 fw-semibold\">9,123</div>\n                      </div>\n                    </CCol>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Recurring Clients</div>\n                        <div className=\"fs-5 fw-semibold\">22,643</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n                  {progressGroupExample1.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-prepend\">\n                        <span className=\"text-medium-emphasis small\">{item.title}</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"info\" value={item.value1} />\n                        <CProgress thin color=\"danger\" value={item.value2} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Pageviews</div>\n                        <div className=\"fs-5 fw-semibold\">78,623</div>\n                      </div>\n                    </CCol>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Organic</div>\n                        <div className=\"fs-5 fw-semibold\">49,123</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n\n                  {progressGroupExample2.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">{item.value}%</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"warning\" value={item.value} />\n                      </div>\n                    </div>\n                  ))}\n\n                  <div className=\"mb-5\"></div>\n\n                  {progressGroupExample3.map((item, index) => (\n                    <div className=\"progress-group\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">\n                          {item.value}{' '}\n                          <span className=\"text-medium-emphasis small\">({item.percent}%)</span>\n                        </span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"success\" value={item.percent} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n              </CRow>\n\n              <br />\n\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">\n                      <CIcon icon={cilPeople} />\n                    </CTableHeaderCell>\n                    <CTableHeaderCell>User</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Country</CTableHeaderCell>\n                    <CTableHeaderCell>Usage</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Payment Method</CTableHeaderCell>\n                    <CTableHeaderCell>Activity</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {tableExample.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell className=\"text-center\">\n                        <CAvatar size=\"md\" src={item.avatar.src} status={item.avatar.status} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.user.name}</div>\n                        <div className=\"small text-medium-emphasis\">\n                          <span>{item.user.new ? 'New' : 'Recurring'}</span> | Registered:{' '}\n                          {item.user.registered}\n                        </div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CIcon size=\"xl\" icon={item.country.flag} title={item.country.name} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"clearfix\">\n                          <div className=\"float-start\">\n                            <strong>{item.usage.value}%</strong>\n                          </div>\n                          <div className=\"float-end\">\n                            <small className=\"text-medium-emphasis\">{item.usage.period}</small>\n                          </div>\n                        </div>\n                        <CProgress thin color={item.usage.color} value={item.usage.value} />\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CIcon size=\"xl\" icon={item.payment.icon} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"small text-medium-emphasis\">Last login</div>\n                        <strong>{item.activity}</strong>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow> */}\n    </div>\n  )\n}\n\nexport default Dashboard\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { CCard, CCardBody, CCardHeader, CCol, CFormCheck, CFormSwitch, CRow } from '@coreui/react'\nimport { DocsExample } from 'src/components'\n\nconst ChecksRadios = ({ onChange }) => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Select User</strong>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/checks-radios#radios\">\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDefault\"\n                id=\"flexRadioDefault1\"\n                label=\"Super Admin\"\n                value=\"sadmin\"\n                onChange={onChange}\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDefault\"\n                id=\"flexRadioDefault2\"\n                label=\"Church Admin\"\n                value=\"admin\"\n                onChange={onChange}\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDefault\"\n                id=\"flexRadioDefault3\"\n                label=\"User-Organization\"\n                value=\"organization\"\n                onChange={onChange}\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDefault\"\n                id=\"flexRadioDefault3\"\n                label=\"User-Individual\"\n                value=\"individual\"\n                onChange={onChange}\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      {/* <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checkbox</strong>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/checks-radios\">\n              <CFormCheck id=\"flexCheckDefault\" label=\"Default checkbox\" />\n              <CFormCheck id=\"flexCheckChecked\" label=\"Checked checkbox\" defaultChecked />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checkbox</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Add the <code>disabled</code> attribute and the associated <code>&lt;label&gt;</code>s\n              are automatically styled to match with a lighter color to help indicate the\n              input&#39;s state.\n            </p>\n            <DocsExample href=\"forms/checks-radios#disabled\">\n              <CFormCheck label=\"Disabled checkbox\" disabled />\n              <CFormCheck label=\"Disabled checked checkbox\" defaultChecked disabled />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Radio</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/checks-radios#disabled-1\">\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDisabled\"\n                id=\"flexRadioDisabled\"\n                label=\"Disabled radio\"\n                disabled\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDisabled\"\n                id=\"flexRadioCheckedDisabled\"\n                label=\"Disabled checked radio\"\n                defaultChecked\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Switches</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              A switch has the markup of a custom checkbox but uses the <code>switch</code> boolean\n              properly to render a toggle switch. Switches also support the <code>disabled</code>{' '}\n              attribute.\n            </p>\n            <DocsExample href=\"forms/checks-radios#switches\">\n              <CFormSwitch label=\"Default switch checkbox input\" id=\"formSwitchCheckDefault\" />\n              <CFormSwitch\n                label=\"Checked switch checkbox input\"\n                id=\"formSwitchCheckChecked\"\n                defaultChecked\n              />\n              <CFormSwitch\n                label=\"Disabled switch checkbox input\"\n                id=\"formSwitchCheckDisabled\"\n                disabled\n              />\n              <CFormSwitch\n                label=\"Disabled checked switch checkbox input\"\n                id=\"formSwitchCheckCheckedDisabled\"\n                defaultChecked\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Switches</strong> <small>Sizes</small>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/checks-radios#sizes\">\n              <CFormSwitch label=\"Default switch checkbox input\" id=\"formSwitchCheckDefault\" />\n              <CFormSwitch\n                size=\"lg\"\n                label=\"Large switch checkbox input\"\n                id=\"formSwitchCheckDefaultLg\"\n              />\n              <CFormSwitch\n                size=\"xl\"\n                label=\"Extra large switch checkbox input\"\n                id=\"formSwitchCheckDefaultXL\"\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checks and Radios</strong> <small>Default layout (stacked)</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              By default, any number of checkboxes and radios that are immediate sibling will be\n              vertically stacked and appropriately spaced.\n            </p>\n            <DocsExample href=\"forms/checks-radios#default-stacked\">\n              <CFormCheck id=\"defaultCheck1\" label=\"Default checkbox\" />\n              <CFormCheck id=\"defaultCheck2\" label=\"Disabled checkbox\" disabled />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#default-stacked\">\n              <CFormCheck\n                type=\"radio\"\n                name=\"exampleRadios\"\n                id=\"exampleRadios1\"\n                value=\"option1\"\n                label=\"Default radio\"\n                defaultChecked\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"exampleRadios\"\n                id=\"exampleRadios2\"\n                value=\"option2\"\n                label=\"Second default radio\"\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"exampleRadios\"\n                id=\"exampleRadios3\"\n                value=\"option3\"\n                label=\"Disabled radio\"\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checks and Radios</strong> <small>Inline</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Group checkboxes or radios on the same horizontal row by adding <code>inline</code>{' '}\n              boolean property to any <code>&lt;CFormCheck&gt;</code>.\n            </p>\n            <DocsExample href=\"forms/checks-radios#inline\">\n              <CFormCheck inline id=\"inlineCheckbox1\" value=\"option1\" label=\"1\" />\n              <CFormCheck inline id=\"inlineCheckbox2\" value=\"option2\" label=\"2\" />\n              <CFormCheck\n                inline\n                id=\"inlineCheckbox3\"\n                value=\"option3\"\n                label=\"3 (disabled)\"\n                disabled\n              />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#inline\">\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox1\"\n                value=\"option1\"\n                label=\"1\"\n              />\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox2\"\n                value=\"option2\"\n                label=\"2\"\n              />\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox3\"\n                value=\"option3\"\n                label=\"3 (disabled)\"\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checks and Radios</strong> <small>Without labels</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Remember to still provide some form of accessible name for assistive technologies (for\n              instance, using <code>aria-label</code>).\n            </p>\n            <DocsExample href=\"forms/checks-radios#without-labels\">\n              <div>\n                <CFormCheck id=\"checkboxNoLabel\" value=\"\" aria-label=\"...\" />\n              </div>\n              <div>\n                <CFormCheck\n                  type=\"radio\"\n                  name=\"radioNoLabel\"\n                  id=\"radioNoLabel\"\n                  value=\"\"\n                  aria-label=\"...\"\n                />\n              </div>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Toggle buttons</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Create button-like checkboxes and radio buttons by using <code>button</code> boolean\n              property on the <code>&lt;CFormCheck&gt;</code> component. These toggle buttons can\n              further be grouped in a button group if needed.\n            </p>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'primary ' }}\n                id=\"btn-check\"\n                autoComplete=\"off\"\n                label=\"Single toggle\"\n              />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'primary ' }}\n                id=\"btn-check-2\"\n                autoComplete=\"off\"\n                label=\"Checked\"\n                defaultChecked\n              />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'primary ' }}\n                id=\"btn-check-3\"\n                autoComplete=\"off\"\n                label=\"Disabled\"\n                disabled\n              />\n            </DocsExample>\n            <h3>Radio toggle buttons</h3>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                label=\"Checked\"\n                defaultChecked\n              />\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option2\"\n                autoComplete=\"off\"\n                label=\"Radio\"\n              />\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option3\"\n                autoComplete=\"off\"\n                label=\"Radio\"\n                disabled\n              />\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option4\"\n                autoComplete=\"off\"\n                label=\"Radio\"\n              />\n            </DocsExample>\n            <h3>Outlined styles</h3>\n            <p className=\"text-medium-emphasis small\">\n              Different variants of button, such at the various outlined styles, are supported.\n            </p>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <div>\n                <CFormCheck\n                  button={{ color: 'primary', variant: 'outline' }}\n                  id=\"btn-check-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Single toggle\"\n                />\n              </div>\n              <div>\n                <CFormCheck\n                  button={{ color: 'secondary', variant: 'outline' }}\n                  id=\"btn-check-2-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Checked\"\n                  defaultChecked\n                />\n              </div>\n              <div>\n                <CFormCheck\n                  button={{ color: 'success', variant: 'outline' }}\n                  type=\"radio\"\n                  name=\"options-outlined\"\n                  id=\"success-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Radio\"\n                  defaultChecked\n                />\n                <CFormCheck\n                  button={{ color: 'danger', variant: 'outline' }}\n                  type=\"radio\"\n                  name=\"options-outlined\"\n                  id=\"danger-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Radio\"\n                />\n              </div>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol> */}\n    </CRow>\n  )\n}\n\nexport default ChecksRadios\n","import React, { useState, createContext, useContext } from 'react'\nimport { Link, Navigate, NavLink, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser, cilEmail } from '@coreui/icons'\nimport image from '../../../assets/images/Login.png'\nimport ChecksRadios from '../../forms/checks-radios/ChecksRadios.js'\nimport Dashboard from 'src/views/dashboard/Dashboard'\nimport DefaultLayout from 'src/layout/DefaultLayout'\n// import UserContext from '../../../context/UserContext'\n\nconst Login = () => {\n  const [user, setUser] = useState()\n  const [path, setPath] = useState()\n  // const { dispatch } = useContext(UserContext)\n  const navigate = useNavigate()\n  // localStorage.setItem('user', null)\n  const handleChange = (e) => {\n    e.preventDefault()\n    // const value = e.target.value\n    setUser(e.target.value)\n    localStorage.setItem('user', e.target.value)\n  }\n  // const handleClick = (e) => {\n  //   e.preventDefault()\n  //   // dispatch({ type: 'LOGIN', payload: user })\n  //   navigate('/dashboard')\n  // }\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\" style={{ width: '100%', height: 'auto' }}>\n          <CCol md={8}>\n            <CCardGroup style={{ width: '100%', height: 'auto' }}>\n              <CCard style={{ width: '100%', height: 'auto' }}>\n                <CCardHeader className=\"text-center\">\n                  <h3>Login</h3>\n                </CCardHeader>\n                <CCardBody>\n                  <CForm>\n                    <ChecksRadios onChange={handleChange} />\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>@</CInputGroupText>\n                      <CFormInput placeholder=\"Email\" autoComplete=\"username\" />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      {console.log(user)}\n                      <CCol xs={6}>\n                        {user === 'sadmin' && (\n                          <Link to=\"/forms/church-table/\">\n                            <CButton color=\"primary\" className=\"px-4\">\n                              Login\n                            </CButton>\n                          </Link>\n                        )}\n                        {user === 'admin' && (\n                          <Link to=\"/dashboard1\">\n                            <CButton color=\"primary\" className=\"px-4\">\n                              Login\n                            </CButton>\n                          </Link>\n                        )}\n                        {user === 'individual' && (\n                          <Link to=\"/forms/user-contribution-table/\">\n                            <CButton color=\"primary\" className=\"px-4\">\n                              Login\n                            </CButton>\n                          </Link>\n                        )}\n                        {user === 'organization' && (\n                          <Link to=\"/forms/user-contribution-table/\">\n                            <CButton color=\"primary\" className=\"px-4\">\n                              Login\n                            </CButton>\n                          </Link>\n                        )}\n                        {/* </UserContext.Provider> */}\n                      </CCol>\n                      <CCol xs={6} className=\"text-right\">\n                        <Link to=\"/forgotpassword\" style={{ textDecoration: 'none' }}>\n                          <CButton color=\"link\" className=\"px-0 text-decoration-none\">\n                            Forgot password?\n                          </CButton>\n                        </Link>\n                      </CCol>\n                      <CCol>\n                        <p className=\"py-5\">\n                          New User?\n                          <Link to=\"/register\" className=\"text-decoration-none\">\n                            {' '}\n                            Register\n                          </Link>\n                        </p>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              <CCard\n                className=\"text-black py-5 content center\"\n                style={{ width: '100%', height: 'auto' }}\n              >\n                <CCardBody\n                  className=\"text-center m-auto\"\n                  style={{ display: 'flex' }}\n                  justify-content-center\n                >\n                  <div className=\"m-auto\">\n                    <img className=\"w-100\" src={image} alt=\"Image\" />\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CWidgetStatsD, CRow, CCol } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cibFacebook, cibLinkedin, cibTwitter, cilCalendar } from '@coreui/icons'\nimport { CChart } from '@coreui/react-chartjs'\n\nconst WidgetsBrand = ({ withCharts }) => {\n  const chartOptions = {\n    elements: {\n      line: {\n        tension: 0.4,\n      },\n      point: {\n        radius: 0,\n        hitRadius: 10,\n        hoverRadius: 4,\n        hoverBorderWidth: 3,\n      },\n    },\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      x: {\n        display: false,\n      },\n      y: {\n        display: false,\n      },\n    },\n  }\n\n  return (\n    <CRow className=\"my-5\">\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [65, 59, 84, 84, 51, 55, 40],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cibFacebook} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'friends', value: '89K' },\n            { title: 'feeds', value: '459' },\n          ]}\n          style={{\n            '--cui-card-cap-bg': '#3b5998',\n          }}\n        />\n      </CCol>\n\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [1, 13, 9, 17, 34, 41, 38],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cibTwitter} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'followers', value: '973k' },\n            { title: 'tweets', value: '1.792' },\n          ]}\n          style={{\n            '--cui-card-cap-bg': '#00aced',\n          }}\n        />\n      </CCol>\n\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [78, 81, 80, 45, 34, 12, 40],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cibLinkedin} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'contacts', value: '500' },\n            { title: 'feeds', value: '1.292' },\n          ]}\n          style={{\n            '--cui-card-cap-bg': '#4875b4',\n          }}\n        />\n      </CCol>\n\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsD\n          className=\"mb-4\"\n          color=\"warning\"\n          {...(withCharts && {\n            chart: (\n              <CChart\n                className=\"position-absolute w-100 h-100\"\n                type=\"line\"\n                data={{\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                  datasets: [\n                    {\n                      backgroundColor: 'rgba(255,255,255,.1)',\n                      borderColor: 'rgba(255,255,255,.55)',\n                      pointHoverBackgroundColor: '#fff',\n                      borderWidth: 2,\n                      data: [35, 23, 56, 22, 97, 23, 64],\n                      fill: true,\n                    },\n                  ],\n                }}\n                options={chartOptions}\n              />\n            ),\n          })}\n          icon={<CIcon icon={cilCalendar} height={52} className=\"my-4 text-white\" />}\n          values={[\n            { title: 'events', value: '12+' },\n            { title: 'meetings', value: '4' },\n          ]}\n        />\n      </CCol>\n    </CRow>\n  )\n}\n\nWidgetsBrand.propTypes = {\n  withCharts: PropTypes.bool,\n}\n\nexport default WidgetsBrand\n","import React from 'react'\nimport {\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\nimport CIcon from '@coreui/icons-react'\nimport { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\nimport { Link } from 'react-router-dom'\n\nconst WidgetsDropdown = () => {\n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <Link to=\"/forms/organization-table/\" style={{ textDecoration: 'none' }}>\n          <CWidgetStatsA\n            className=\"my-4\"\n            color=\"secondary\"\n            value={<h4 className=\"my-3\">#500</h4>}\n            title={<h4 className=\"my-3\">Organization</h4>}\n            // action={\n            //   <CDropdown alignment=\"end\">\n            //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n            //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n            //     </CDropdownToggle>\n            //     <CDropdownMenu>\n            //       <CDropdownItem>Action</CDropdownItem>\n            //       <CDropdownItem>Another action</CDropdownItem>\n            //       <CDropdownItem>Something else here...</CDropdownItem>\n            //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n            //     </CDropdownMenu>\n            //   </CDropdown>\n            // }\n            // chart={\n            //   <CChartLine\n            //     className=\"mt-3 mx-3\"\n            //     style={{ height: '70px' }}\n            //     data={{\n            //       labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            //       datasets: [\n            //         {\n            //           label: 'My First dataset',\n            //           backgroundColor: 'transparent',\n            //           borderColor: 'rgba(255,255,255,.55)',\n            //           pointBackgroundColor: getStyle('--cui-primary'),\n            //           data: [65, 59, 84, 84, 51, 55, 40],\n            //         },\n            //       ],\n            //     }}\n            //     options={{\n            //       plugins: {\n            //         legend: {\n            //           display: false,\n            //         },\n            //       },\n            //       maintainAspectRatio: false,\n            //       scales: {\n            //         x: {\n            //           grid: {\n            //             display: false,\n            //             drawBorder: false,\n            //           },\n            //           ticks: {\n            //             display: false,\n            //           },\n            //         },\n            //         y: {\n            //           min: 30,\n            //           max: 89,\n            //           display: false,\n            //           grid: {\n            //             display: false,\n            //           },\n            //           ticks: {\n            //             display: false,\n            //           },\n            //         },\n            //       },\n            //       elements: {\n            //         line: {\n            //           borderWidth: 1,\n            //           tension: 0.4,\n            //         },\n            //         point: {\n            //           radius: 4,\n            //           hitRadius: 10,\n            //           hoverRadius: 4,\n            //         },\n            //       },\n            //     }}\n            //   />\n            // }\n          />\n        </Link>\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <Link to=\"/forms/people-table/\" style={{ textDecoration: 'none' }}>\n          <CWidgetStatsA\n            className=\"my-4\"\n            color=\"info\"\n            value={<h4 className=\"my-3\">#1500</h4>}\n            title={<h4 className=\"my-3\">Individual</h4>}\n            // action={\n            //   <CDropdown alignment=\"end\">\n            //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n            //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n            //     </CDropdownToggle>\n            //     <CDropdownMenu>\n            //       <CDropdownItem>Action</CDropdownItem>\n            //       <CDropdownItem>Another action</CDropdownItem>\n            //       <CDropdownItem>Something else here...</CDropdownItem>\n            //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n            //     </CDropdownMenu>\n            //   </CDropdown>\n            // }\n            // chart={\n            //   <CChartLine\n            //     className=\"mt-3 mx-3\"\n            //     style={{ height: '70px' }}\n            //     data={{\n            //       labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            //       datasets: [\n            //         {\n            //           label: 'My First dataset',\n            //           backgroundColor: 'transparent',\n            //           borderColor: 'rgba(255,255,255,.55)',\n            //           pointBackgroundColor: getStyle('--cui-info'),\n            //           data: [1, 18, 9, 17, 34, 22, 11],\n            //         },\n            //       ],\n            //     }}\n            //     options={{\n            //       plugins: {\n            //         legend: {\n            //           display: false,\n            //         },\n            //       },\n            //       maintainAspectRatio: false,\n            //       scales: {\n            //         x: {\n            //           grid: {\n            //             display: false,\n            //             drawBorder: false,\n            //           },\n            //           ticks: {\n            //             display: false,\n            //           },\n            //         },\n            //         y: {\n            //           min: -9,\n            //           max: 39,\n            //           display: false,\n            //           grid: {\n            //             display: false,\n            //           },\n            //           ticks: {\n            //             display: false,\n            //           },\n            //         },\n            //       },\n            //       elements: {\n            //         line: {\n            //           borderWidth: 1,\n            //         },\n            //         point: {\n            //           radius: 4,\n            //           hitRadius: 10,\n            //           hoverRadius: 4,\n            //         },\n            //       },\n            //     }}\n            //   />\n            // }\n          />\n        </Link>\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <Link to=\"/forms/contribution-table\" style={{ textDecoration: 'none' }}>\n          <CWidgetStatsA\n            className=\"my-4\"\n            color=\"warning\"\n            value={<h4 className=\"my-3\">$2000</h4>}\n            title={<h4 className=\"my-3\">Contribution</h4>}\n            // action={\n            //   <CDropdown alignment=\"end\">\n            //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n            //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n            //     </CDropdownToggle>\n            //     <CDropdownMenu>\n            //       <CDropdownItem>Action</CDropdownItem>\n            //       <CDropdownItem>Another action</CDropdownItem>\n            //       <CDropdownItem>Something else here...</CDropdownItem>\n            //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n            //     </CDropdownMenu>\n            //   </CDropdown>\n            // }\n            // chart={\n            //   <CChartLine\n            //     className=\"mt-3\"\n            //     style={{ height: '70px' }}\n            //     data={{\n            //       labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            //       datasets: [\n            //         {\n            //           label: 'My First dataset',\n            //           backgroundColor: 'rgba(255,255,255,.2)',\n            //           borderColor: 'rgba(255,255,255,.55)',\n            //           data: [78, 81, 80, 45, 34, 12, 40],\n            //           fill: true,\n            //         },\n            //       ],\n            //     }}\n            //     options={{\n            //       plugins: {\n            //         legend: {\n            //           display: false,\n            //         },\n            //       },\n            //       maintainAspectRatio: false,\n            //       scales: {\n            //         x: {\n            //           display: false,\n            //         },\n            //         y: {\n            //           display: false,\n            //         },\n            //       },\n            //       elements: {\n            //         line: {\n            //           borderWidth: 2,\n            //           tension: 0.4,\n            //         },\n            //         point: {\n            //           radius: 0,\n            //           hitRadius: 10,\n            //           hoverRadius: 4,\n            //         },\n            //       },\n            //     }}\n            //   />\n            // }\n          />\n        </Link>\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <Link to=\"/forms/pledged-category/\" style={{ textDecoration: 'none' }}>\n          {' '}\n          <CWidgetStatsA\n            className=\"my-4\"\n            color=\"danger\"\n            value={<h4 className=\"my-3\">#3</h4>}\n            title={<h4 className=\"my-3\">Pledged Categories</h4>}\n            // action={\n            //   <CDropdown alignment=\"end\">\n            //     <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n            //       <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n            //     </CDropdownToggle>\n            //     <CDropdownMenu>\n            //       <CDropdownItem>Action</CDropdownItem>\n            //       <CDropdownItem>Another action</CDropdownItem>\n            //       <CDropdownItem>Something else here...</CDropdownItem>\n            //       <CDropdownItem disabled>Disabled action</CDropdownItem>\n            //     </CDropdownMenu>\n            //   </CDropdown>\n            // }\n            // chart={\n            //   <CChartBar\n            //     className=\"mt-3 mx-3\"\n            //     style={{ height: '70px' }}\n            //     data={{\n            //       labels: [\n            //         'January',\n            //         'February',\n            //         'March',\n            //         'April',\n            //         'May',\n            //         'June',\n            //         'July',\n            //         'August',\n            //         'September',\n            //         'October',\n            //         'November',\n            //         'December',\n            //         'January',\n            //         'February',\n            //         'March',\n            //         'April',\n            //       ],\n            //       datasets: [\n            //         {\n            //           label: 'My First dataset',\n            //           backgroundColor: 'rgba(255,255,255,.2)',\n            //           borderColor: 'rgba(255,255,255,.55)',\n            //           data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\n            //           barPercentage: 0.6,\n            //         },\n            //       ],\n            //     }}\n            //     options={{\n            //       maintainAspectRatio: false,\n            //       plugins: {\n            //         legend: {\n            //           display: false,\n            //         },\n            //       },\n            //       scales: {\n            //         x: {\n            //           grid: {\n            //             display: false,\n            //             drawTicks: false,\n            //           },\n            //           ticks: {\n            //             display: false,\n            //           },\n            //         },\n            //         y: {\n            //           grid: {\n            //             display: false,\n            //             drawBorder: false,\n            //             drawTicks: false,\n            //           },\n            //           ticks: {\n            //             display: false,\n            //           },\n            //         },\n            //       },\n            //     }}\n            //   />\n            // }\n          />\n        </Link>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n","export const cilLockLocked = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M384,200V144a128,128,0,0,0-256,0v56H88V328c0,92.635,75.364,168,168,168s168-75.365,168-168V200ZM160,144a96,96,0,0,1,192,0v56H160ZM392,328c0,74.99-61.01,136-136,136s-136-61.01-136-136V232H392Z' class='ci-primary'/>\"]"],"names":["className","cilUser","cilUserFemale","cibGoogle","cibFacebook","cibTwitter","cibLinkedin","cifUs","cibCcMastercard","cifBr","cibCcVisa","cifIn","cibCcStripe","cifFr","cibCcPaypal","cifEs","cibCcApplePay","cifPl","cibCcAmex","src","image","alt","style","width","height","onChange","xs","href","type","name","id","label","value","useState","user","setUser","useNavigate","md","ChecksRadios","e","preventDefault","target","localStorage","setItem","placeholder","autoComplete","icon","cilLockLocked","console","log","to","color","textDecoration","display","withCharts","chartOptions","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","maintainAspectRatio","plugins","legend","scales","x","y","sm","lg","chart","data","labels","datasets","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","fill","options","values","title","cilCalendar"],"sourceRoot":""}